'use strict';(function(){const indexCfg={cache:true};indexCfg.doc={id:'id',field:['title','content'],store:['title','href','section'],};const index=FlexSearch.create('balance',indexCfg);window.bookSearchIndex=index;index.add({'id':0,'href':'/features/actions/','title':"Actions",'section':"Features",'content':"Actions API #  The Actions API is used by both the dialogs API and the ButtonBar API. It essentially abstracts away the notion of how a control is represented, instead focusing on the properties of the control (e.g. text, graphic, etc). This makes it really easy to reuse the same Action in multiple places in your UI. We’ve also developed convenience API to convert Actions into the common UI controls (see the ActionUtils class for these methods). In recent releases, we’ve built on to the Actions API to include functionality such as:\n An ActionProxy annotation (to create actions directly by annotating methods) which can be discovered at runtime using the ActionMap class. ActionTextBehavior to more easily specify what text is shown in UI controls when built from an action.  "});index.add({'id':1,'href':'/features/borders/','title':"Borders",'section':"Features",'content':"Borders #  The Borders API is a simple (and still relatively exploratory) API that allows you to easily wrap panes or nodes with a border, similar to the Swing BorderFactory API. Here’s a some code, and then a screenshot of what that code results in:\nNode wrappedButton = Borders.wrap(button) .lineBorder().color(Color.RED).build() .lineBorder().color(Color.GREEN).build() .build();  A single button with two borders  "});index.add({'id':2,'href':'/javadocs/','title':"Javadocs",'section':"ControlsFX",'content':"Javadocs #  One of the goals of ControlsFX is to have high quality JavaDocs, so one of the main drivers for every release is to improve those further.\nAs always, the JavaDocs can be read online, but they are also available as part of the download. The intention is that the JavaDocs should be the primary way of people learning how to use the ControlsFX API, so there are good code samples and screenshots of the controls in action.\nHopefully this will help to get people started quickly.\n"});index.add({'id':3,'href':'/translations/','title':"Translations",'section':"ControlsFX",'content':"Translations #  ControlsFX has externalised all translatable strings. Therefore, the community can help to translate these strings into their local languages.\nControlsFX is currently being translated to almost 50 languages!\nHopefully in future versions we can take that number even higher, but for now we really do have an excellent amount of language coverage.\n"});index.add({'id':4,'href':'/features/breadcrumbar/','title':"BreadCrumbBar",'section':"Features",'content':"BreadCrumbBar #  The BreadCrumbBar control is designed to allow people to easily navigate back up a hierarchical page structure. It’s based on the same API as the TreeView control (that is, it uses the TreeItem structure). This control is useful to visualize and navigate a hierarchical path structure, such as file system. Here’s what it currently looks like:\n The BreadCrumbBar UI control  "});index.add({'id':5,'href':'/features/checkcombobox/','title':"CheckComboBox",'section':"Features",'content':"CheckComboBox / CheckListView / CheckTreeView #  All three controls offer the same functionality – support for checking zero or more items in a ComboBox, ListView, or a TreeView, and being able to easily retrieve the checked items from an underlying ‘check model’. These were already easily doable using standard JavaFX APIs, but this takes it a step further by automatically tracking the checkbox selections for you. Here’s a screenshot of each of the new controls:\n CheckComboBox, CheckListView, and CheckTreeView  "});index.add({'id':6,'href':'/features/checklistview/','title':"CheckListView",'section':"Features",'content':"CheckComboBox / CheckListView / CheckTreeView #  All three controls offer the same functionality – support for checking zero or more items in a ComboBox, ListView, or a TreeView, and being able to easily retrieve the checked items from an underlying ‘check model’. These were already easily doable using standard JavaFX APIs, but this takes it a step further by automatically tracking the checkbox selections for you. Here’s a screenshot of each of the new controls:\n CheckComboBox, CheckListView, and CheckTreeView  "});index.add({'id':7,'href':'/features/checktreeview/','title':"CheckTreeView",'section':"Features",'content':"CheckComboBox / CheckListView / CheckTreeView #  All three controls offer the same functionality – support for checking zero or more items in a ComboBox, ListView, or a TreeView, and being able to easily retrieve the checked items from an underlying ‘check model’. These were already easily doable using standard JavaFX APIs, but this takes it a step further by automatically tracking the checkbox selections for you. Here’s a screenshot of each of the new controls:\n CheckComboBox, CheckListView, and CheckTreeView  "});index.add({'id':8,'href':'/translations/transifex/','title':"ControlsFX Transifex",'section':"Translations",'content':"ControlsFX Transifex #  ControlsFX uses Transifex, which provides a web application allowing translators to write, submit, and manage their translations.\nControlsFX is very fortunate to have a team of people who support it by translating the English strings into localized strings. We are always on the lookout for more people to translate ControlsFX into additional languages. If you are able to help, and especially if the language is not already being translated, or is not completed for the next release, then read on! And, thanks so much in advance for helping out!\nGetting Started #  The amount of work to translate ControlsFX is minimal. You can gauge this for yourself by having a look at the existing translation files in our repository.\nTransifex #  Go to https://www.transifex.com/signup/contributor/ and fill out the form to create your free Transifex account, if you don’t already have one.\nJoin a Translation Team #   Once you’ve set up your account, visit https://www.transifex.com/controlsfx/controlsfx/ to become a translator for your language. When you visit the project page, it looks like this. If your language is listed, click on the name of the language to go to the language’s page. Here is an example of choosing the Lithuanian translation project:   Once you’re on the language’s page, click “Join team” to become part of the translation team for that language:   Once you’ve joined a translation team, you can begin translating strings immediately!\nTranslate With Transifex #  When you are on a language page you will see the available resource to translate.\n Click on it and select \u0026ldquo;Translate now\u0026rdquo;.\n This will open the Transifex web editor in which you can edit the translations. For more help regarding the web editor visit Introduction to the Web Editor.\nRequesting A New Language #  If your language is not listed, click the “Request language” button on the main project page to start a new translation project for your language:\nKeep in mind that variants of your language may exist (“Portuguese” versus “Portuguese (Brazil)”), and these variants may meet your needs.\nA ControlsFX translation team member will respond to your request. If your language is approved, you will become the Language Coordinator for this particular language. As a Language Coordinator you will be responsible for the translation of the project. You can add additional coordinators, reviewers, and translators as you wish. You should also ensure that the translations are completely translated and reviewed as only such translations will be a part of the ControlsFX release.\nDownloading translations when building locally #  ControlsFX build script automatically tries to download the translations when building locally. You just have to set transifex.username and transifex.password properties in your gradle.properties file. If these properties are not set then the build will still continue with a warning, and you\u0026rsquo;ll just be missing all but the English file.\n"});index.add({'id':9,'href':'/features/decorationvalidation/','title':"Decoration / Validation",'section':"Features",'content':"Decoration / Validation #  ControlsFX has a decoration framework to allow developers to apply decorations to nodes on screen. For example, you may want to show graphics in the corner of your nodes, or add a styleclass in certain circumstances. The decoration framework makes this kind of action trivial. However, to be fair, the decoration framework was primarily developed to be the visual feedback mechanism for a validation framework, and we have one of those in ControlsFX too!\nThe validation framework is designed to be lightweight, but will grow over time as developers suggest desired functionality (we are definitely open to suggestions!).\nHere are two screenshots:\n Graphic decorations showing how validation failed    CSS decorations showing how validation failed  "});index.add({'id':10,'href':'/features/dialog/','title':"Dialog ‘Command Links’",'section':"Features",'content':"Dialog ‘Command Links’ #  Command links are common on the Windows platform. The version we have in ControlsFX looks like the following:\n Dialogs Command Links  "});index.add({'id':11,'href':'/fxsampler/','title':"FXSampler",'section':"ControlsFX",'content':"FXSampler #  To help people investigate the ControlsFX controls, the ControlsFX sample application has seen some further polish, integrating a WebView to make browsing the JavaDocs easier.\nIn fact, this application is now standalone so that third party projects can make use of it in their own projects!\nHere’s what it looks like:\n The FXSampler application  "});index.add({'id':12,'href':'/features/glyph/','title':"Glyph Font",'section':"Features",'content':"Glyph font #  ControlsFX supports font packs. The following font packs:\n Font Awesome IcoMoon  This support is not only in the form of API to render glyphs as graphics in Buttons, etc – it is also baked into our other API. For example, the new @ActionProxy API can have its graphic set from a font pack in the following manner:\n@ActionProxy(text=”Action Text”, image=”font\u0026gt;FontAwesome:STAR”) This feature was inspired by Jens Deters’ FontAwesomeFX.\n GlyphFont  "});index.add({'id':13,'href':'/features/gridview/','title':"GridView",'section':"Features",'content':"GridView #  GridView is a fast, virtualised grid container similar to ListView, except that there can be multiple cells on each row. Great for showing images!\n GridView  "});index.add({'id':14,'href':'/features/hiddensidespane/','title':"HiddenSidesPane",'section':"Features",'content':"HiddenSidesPane #  A pane used to display a full-size content node and four initially hidden nodes on the four sides. The hidden nodes can be made visible by moving the mouse cursor to the edges of the pane. The hidden node will appear (at its preferred width or height) with a short slide-in animation. The node will disappear again as soon as the mouse cursor exits it. A hidden node / side can also be pinned, and it will remain visible as long as it stays pinned.\n The HiddenSidesPane, with a node at the bottom that has animated into view  "});index.add({'id':15,'href':'/features/hyperlinklabel/','title':"HyperlinkLabel",'section':"Features",'content':"HyperlinkLabel #  This control takes a text string (like a Label), but you can annotate that string with text in [square braces]. By doing this, the text in square braces is automatically rendered as a hyperlink. You can then register a callback to be notified when a user clicks on the hyperlinks in the text (and then do the correct thing, based on the selected hyperlink).\nEssentially, the use case is when you have a \u0026ldquo;block of text in which you want to embed hyperlinks\u0026rdquo; (kind of like what I just craftily did right there). In this situation you are left to painfully merge together Label and Hyperlink nodes, and hope everything works out. To save you this hassle, take HyperlinkLabel for a spin!\nHere’s a thrilling screenshot of the control in action:\n HyperlinkLabel  "});index.add({'id':16,'href':'/features/infooverlay/','title':"InfoOverlay",'section':"Features",'content':"InfoOverlay #  This control was initially developed by David Grieve before being integrated into ControlsFX.\nIt is designed to show a small blurb of text above a node (most commonly an ImageView, but it will work with any Node). The text can be collapsed down to a single line, or expanded to show the entire text.\nIn some ways, it can be thought of as an always visible tooltip. By default, it is collapsed so only the first line is shown – hovering over it (or clicking on it if the showOnHover functionality is disabled) will expand it to show all text.\nShown below is a screenshot of the InfoOverlay control in both its collapsed and expanded states:\n The InfoOverlay control  "});index.add({'id':17,'href':'/features/listselectionview/','title':"ListSelectionView",'section':"Features",'content':"ListSelectionView #  A control used to perform a multi-selection via the help of two list views. Items can be moved from one list (source) to the other (target). This can be done by either double-clicking on the list items or by using one of the “move” buttons between the two lists.\nEach list can be decorated with a header and a footer node. The default header nodes are simply two labels: \u0026ldquo;Available\u0026rdquo; and \u0026ldquo;Selected\u0026rdquo;.\n ListSelectionView control  "});index.add({'id':18,'href':'/features/masterdetailpane/','title':"MasterDetailPane",'section':"Features",'content':"MasterDetailPane #  A master / detail pane is used to display two nodes with a strong relationship to each other. Most of the time the user works with the information displayed in the master node but every once in a while additional information is required and can be made visible via the detail node. By default the detail appears with a short slide-in animation and disappears with a slide-out. This control allows the detail node to be positioned in four different locations (top, bottom, left, or right). Here’s a screenshot with a TableView in the ‘master’ section, and a text display in the ‘detail’ section.\n MasterDetailPane with DetailSide set to RIGHT  Here’s another screenshot, showing the master section above the detail section:\n MasterDetailPane with DetailSide set to BOTTOM  "});index.add({'id':19,'href':'/features/notificationspane/','title':"NotificationPane",'section':"Features",'content':"NotificationPane #  The NotificationPane control allows you to notify your users of something without requiring their immediate input. The NotificationPane will animate in and out of view, and provides support for an arbitrarily complex ‘graphic’ property (put any Node in there), as well as text, and an area to place control buttons. It also supports two visual styles, continuing in our theme of providing light and dark styles.\n NotificationPane  "});index.add({'id':20,'href':'/features/notifications/','title':"Notifications",'section':"Features",'content':"Notifications #  ControlsFX has had the NotificationPane feature for a release or two now, but that required that the notification appear within the window. Some use cases are to simply inform the user of an event, even when the main window itself is not visible (or focused) – think email notifications, for example. This is where the Notifications class comes in – it will show a notification message to users in one of nine locations on the screen, and even supports stacking multiple notifications, and showing complex scenegraphs. After a set duration, the notification will fade out.\n Notifications  "});index.add({'id':21,'href':'/features/plusminusslider/','title':"PlusMinusSlider",'section':"Features",'content':"PlusMinusSlider #  A plus minus slider allows the user to continuously fire an event carrying a value between -1 and +1 by moving a thumb from its center position to the left or right (or top and bottom) edge of the control. The thumb will automatically center itself again on the zero position when the user lets go of the mouse button.\nScrolling through a large list of items at different speeds is one possible use case for a control like this. You may be familiar with Google Picasa, which has a similar control for scrolling through the image list.\n The PlusMinusSlider in both horizontal and vertical states  "});index.add({'id':22,'href':'/features/popover/','title':"PopOver",'section':"Features",'content':"PopOver #  The PopOver control is designed to provide information to users in a visually pleasing way that does not interfere with their workflow. It is hard to explain, but hopefully the screenshot below better summarises the functionality:\n A PopOver with no content  Of course, a PopOver with no content is a little sad, so here’s a screenshot of one with content inside it. Note that this is using a custom TitledPane style that presently doesn\u0026rsquo;t ship with ControlsFX (but that you can create with a little CSS):\n A PopOver with content  "});index.add({'id':23,'href':'/features/propertysheet/','title':"PropertySheet",'section':"Features",'content':"PropertySheet #  PropertySheet is a vertical list of properties that can be edited with a number of pre-build editors. We support string, number, boolean, enumeration, color, and font editors. As well as supporting the built-in editors, you can provide custom editors for your specific use cases.\n A PropertySheet Control  "});index.add({'id':24,'href':'/features/rangeslider/','title':"RangeSlider",'section':"Features",'content':"RangeSlider #  When you want a user to specify a range, right now you need to give them two text fields to type into (or two sliders). Yuck!\nThe RangeSlider control is essentially the standard JavaFX slider but with two draggable thumbs on it – one representing the low value and the other the high value. Much better!\n A RangeSlider Control  "});index.add({'id':25,'href':'/features/rating/','title':"Rating",'section':"Features",'content':"Rating #  Rating is a simple control that allows users to specify a rating between zero, and a maximum value. This control supports partial ratings and updating on a hover or on a click.\n A Rating Control  "});index.add({'id':26,'href':'/features/searchablecombobox/','title':"SearchableComboBox",'section':"Features",'content':"SearchableComboBox #  SearchableComboBox is a simple extension of a ComboBox which shows a search field while the popup is showing. The user can type any text into this search field to filter the popup list.\n A SearchableComboBox Control  "});index.add({'id':27,'href':'/features/segmentedbar/','title':"SegmentedBar",'section':"Features",'content':"SegmentedBar #  A control that makes it easy to create a horizontal or vertical bar that visualizes the segmentation of a total value. It consists of several segments, each segment representing a value. The sum of all values is the total value of the bar.\n Segmented Bar Variations  "});index.add({'id':28,'href':'/features/segmentedbutton/','title':"SegmentedButton",'section':"Features",'content':"SegmentedButton #  When you have a ToggleGroup with buttons in it, it looks nicer when the buttons are grouped together (rather than individual buttons).\nThis is exactly what the SegmentedButton control does - it ‘merges’ together all of your buttons in a ToggleGroup so that it is clear to users that the buttons are related.\n A SegmentedButton Control  "});index.add({'id':29,'href':'/features/snapshotview/','title':"SnapshotView",'section':"Features",'content':"SnapshotView #  The SnapshotView control allows users to draw a bounding box inside a scenegraph (or typically in an ImageView).\nThis bounding box represents the dimensions of their selection, and from which an image can be created of the selected area. This is another of those controls that is easier to describe with an image, so, see below! 🙂\n SnapshotView - the \u0026#39;Controls\u0026#39; section of the image has been selected  "});index.add({'id':30,'href':'/features/spreadsheetview/','title':"SpreadsheetView",'section':"Features",'content':"SpreadsheetView #  The SpreadsheetView control is exactly what you expect – a TableView-like control that supports cell spanning, fixed rows and columns, and cell editing.\nHere’s a screenshot of the control:\n SpreadsheetView  "});index.add({'id':31,'href':'/features/taskprogressview/','title':"TaskProgressView",'section':"Features",'content':"TaskProgressView #  The task progress view is used to visualize the progress of long-running tasks. These tasks are created via the Task class. This view manages a list of such tasks and displays each one of them with their name, progress, and update messages.\nAn optional graphic factory can be set to place a graphic in each row. This allows the user to more easily distinguish between different types of tasks.\n TaskProgressView  "});index.add({'id':32,'href':'/features/textfields/','title':"TextFields",'section':"Features",'content':"TextFields #  ControlsFX ships with a few useful TextField-related controls.\nAutoComplete TextField #  It can provide suggestions to users as they type into it. The popup will only show options based on the currently typed input.\n AutoComplete TextField  TextFields #  In addition, there is API to make it really easy for you to customise a TextField (or PasswordField) by placing nodes within the text area. There are also pre-built features such as clearable fields that show a little cross that clears the text when deleted.\nHere’s a screenshot:\n TextField with nodes  "});index.add({'id':33,'href':'/features/toggleswitch/','title':"ToggleSwitch",'section':"Features",'content':"ToggleSwitch #  Much like a Toggle Button this control allows the user to toggle between one of two states. It has been popularized in touch based devices where its usage is particularly useful because unlike a checkbox the finger touch of a user doesn\u0026rsquo;t obscure the control.\n Toggle Switch  "});index.add({'id':34,'href':'/features/worldmapview/','title':"World Map View",'section':"Features",'content':"World Map View #  A simple map view showing either the entire world or a list of countries. The view is not capable of displaying detailed map information. The view is based on simple SVG data found in a properties file of the ControlsFX distribution.\nA big advantage of this approach is the fact that the view can be run without a network connection. In addition to showing countries or the world the view can also show locations. The map can be customized by specifying custom factories for the country and location views.\n World Map View  "});})();