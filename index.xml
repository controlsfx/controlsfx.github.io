<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>ControlsFX</title><link>/</link><description>Recent content on ControlsFX</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>/features/actions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/features/actions/</guid><description>Actions API # The Actions API is used by both the dialogs API and the ButtonBar API. It essentially abstracts away the notion of how a control is represented, instead focusing on the properties of the control (e.g. text, graphic, etc). This makes it really easy to reuse the same Action in multiple places in your UI. We’ve also developed convenience API to convert Actions into the common UI controls (see the ActionUtils class for these methods).</description></item><item><title/><link>/features/borders/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/features/borders/</guid><description>Borders # The Borders API is a simple (and still relatively exploratory) API that allows you to easily wrap panes or nodes with a border, similar to the Swing BorderFactory API. Here’s a some code, and then a screenshot of what that code results in:
Node wrappedButton = Borders.wrap(button) .lineBorder().color(Color.RED).build() .lineBorder().color(Color.GREEN).build() .build(); A single button with two borders</description></item><item><title>BreadCrumbBar</title><link>/features/breadcrumbar/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/features/breadcrumbar/</guid><description>BreadCrumbBar # The BreadCrumbBar control is designed to allow people to easily navigate back up a hierarchical page structure. It’s based on the same API as the TreeView control (that is, it uses the TreeItem structure). This control is useful to visualize and navigate a hierarchical path structure, such as file system. Here’s what it currently looks like:
The BreadCrumbBar UI control</description></item><item><title>CheckComboBox</title><link>/features/checkcombobox/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/features/checkcombobox/</guid><description>CheckComboBox / CheckListView / CheckTreeView # All three controls offer the same functionality – support for checking zero or more items in a ComboBox, ListView, or a TreeView, and being able to easily retrieve the checked items from an underlying ‘check model’. These were already easily doable using standard JavaFX APIs, but this takes it a step further by automatically tracking the checkbox selections for you. Here’s a screenshot of each of the new controls:</description></item><item><title>CheckListView</title><link>/features/checklistview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/features/checklistview/</guid><description>CheckComboBox / CheckListView / CheckTreeView # All three controls offer the same functionality – support for checking zero or more items in a ComboBox, ListView, or a TreeView, and being able to easily retrieve the checked items from an underlying ‘check model’. These were already easily doable using standard JavaFX APIs, but this takes it a step further by automatically tracking the checkbox selections for you. Here’s a screenshot of each of the new controls:</description></item><item><title>CheckTreeView</title><link>/features/checktreeview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/features/checktreeview/</guid><description>CheckComboBox / CheckListView / CheckTreeView # All three controls offer the same functionality – support for checking zero or more items in a ComboBox, ListView, or a TreeView, and being able to easily retrieve the checked items from an underlying ‘check model’. These were already easily doable using standard JavaFX APIs, but this takes it a step further by automatically tracking the checkbox selections for you. Here’s a screenshot of each of the new controls:</description></item><item><title>ControlsFX Transifex</title><link>/translations/transifex/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/translations/transifex/</guid><description>ControlsFX Transifex # ControlsFX uses Transifex, which provides a web application allowing translators to write, submit, and manage their translations.
ControlsFX is very fortunate to have a team of people who support it by translating the English strings into localized strings. We are always on the lookout for more people to translate ControlsFX into additional languages. If you are able to help, and especially if the language is not already being translated, or is not completed for the next release, then read on!</description></item><item><title>Decoration / Validation</title><link>/features/decorationvalidation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/features/decorationvalidation/</guid><description>Decoration / Validation # ControlsFX has a decoration framework to allow developers to apply decorations to nodes on screen. For example, you may want to show graphics in the corner of your nodes, or add a styleclass in certain circumstances. The decoration framework makes this kind of action trivial. However, to be fair, the decoration framework was primarily developed to be the visual feedback mechanism for a validation framework, and we have one of those in ControlsFX too!</description></item><item><title>Dialog ‘Command Links’</title><link>/features/dialog/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/features/dialog/</guid><description>Dialog ‘Command Links’ # Command links are common on the Windows platform. The version we have in ControlsFX looks like the following:
Dialogs Command Links</description></item><item><title>Glyph Font</title><link>/features/glyph/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/features/glyph/</guid><description>Glyph font # ControlsFX supports font packs. The following font packs:
Font Awesome IcoMoon This support is not only in the form of API to render glyphs as graphics in Buttons, etc – it is also baked into our other API. For example, the new @ActionProxy API can have its graphic set from a font pack in the following manner:
@ActionProxy(text=”Action Text”, image=”font&amp;gt;FontAwesome:STAR”) This feature was inspired by Jens Deters’ FontAwesomeFX.</description></item><item><title>GridView</title><link>/features/gridview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/features/gridview/</guid><description>GridView # GridView is a fast, virtualised grid container similar to ListView, except that there can be multiple cells on each row. Great for showing images!
GridView</description></item><item><title>HiddenSidesPane</title><link>/features/hiddensidespane/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/features/hiddensidespane/</guid><description>HiddenSidesPane # A pane used to display a full-size content node and four initially hidden nodes on the four sides. The hidden nodes can be made visible by moving the mouse cursor to the edges of the pane. The hidden node will appear (at its preferred width or height) with a short slide-in animation. The node will disappear again as soon as the mouse cursor exits it. A hidden node / side can also be pinned, and it will remain visible as long as it stays pinned.</description></item><item><title>HyperlinkLabel</title><link>/features/hyperlinklabel/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/features/hyperlinklabel/</guid><description>HyperlinkLabel # This control takes a text string (like a Label), but you can annotate that string with text in [square braces]. By doing this, the text in square braces is automatically rendered as a hyperlink. You can then register a callback to be notified when a user clicks on the hyperlinks in the text (and then do the correct thing, based on the selected hyperlink).
Essentially, the use case is when you have a &amp;ldquo;block of text in which you want to embed hyperlinks&amp;rdquo; (kind of like what I just craftily did right there).</description></item><item><title>InfoOverlay</title><link>/features/infooverlay/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/features/infooverlay/</guid><description>InfoOverlay # This control was initially developed by David Grieve before being integrated into ControlsFX.
It is designed to show a small blurb of text above a node (most commonly an ImageView, but it will work with any Node). The text can be collapsed down to a single line, or expanded to show the entire text.
In some ways, it can be thought of as an always visible tooltip. By default, it is collapsed so only the first line is shown – hovering over it (or clicking on it if the showOnHover functionality is disabled) will expand it to show all text.</description></item><item><title>ListSelectionView</title><link>/features/listselectionview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/features/listselectionview/</guid><description>ListSelectionView # A control used to perform a multi-selection via the help of two list views. Items can be moved from one list (source) to the other (target). This can be done by either double-clicking on the list items or by using one of the “move” buttons between the two lists.
Each list can be decorated with a header and a footer node. The default header nodes are simply two labels: &amp;ldquo;Available&amp;rdquo; and &amp;ldquo;Selected&amp;rdquo;.</description></item><item><title>MasterDetailPane</title><link>/features/masterdetailpane/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/features/masterdetailpane/</guid><description>MasterDetailPane # A master / detail pane is used to display two nodes with a strong relationship to each other. Most of the time the user works with the information displayed in the master node but every once in a while additional information is required and can be made visible via the detail node. By default the detail appears with a short slide-in animation and disappears with a slide-out. This control allows the detail node to be positioned in four different locations (top, bottom, left, or right).</description></item><item><title>NotificationPane</title><link>/features/notificationspane/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/features/notificationspane/</guid><description>NotificationPane # The NotificationPane control allows you to notify your users of something without requiring their immediate input. The NotificationPane will animate in and out of view, and provides support for an arbitrarily complex ‘graphic’ property (put any Node in there), as well as text, and an area to place control buttons. It also supports two visual styles, continuing in our theme of providing light and dark styles.
NotificationPane</description></item><item><title>Notifications</title><link>/features/notifications/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/features/notifications/</guid><description>Notifications # ControlsFX has had the NotificationPane feature for a release or two now, but that required that the notification appear within the window. Some use cases are to simply inform the user of an event, even when the main window itself is not visible (or focused) – think email notifications, for example. This is where the Notifications class comes in – it will show a notification message to users in one of nine locations on the screen, and even supports stacking multiple notifications, and showing complex scenegraphs.</description></item><item><title>PlusMinusSlider</title><link>/features/plusminusslider/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/features/plusminusslider/</guid><description>PlusMinusSlider # A plus minus slider allows the user to continuously fire an event carrying a value between -1 and +1 by moving a thumb from its center position to the left or right (or top and bottom) edge of the control. The thumb will automatically center itself again on the zero position when the user lets go of the mouse button.
Scrolling through a large list of items at different speeds is one possible use case for a control like this.</description></item><item><title>PopOver</title><link>/features/popover/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/features/popover/</guid><description>PopOver # The PopOver control is designed to provide information to users in a visually pleasing way that does not interfere with their workflow. It is hard to explain, but hopefully the screenshot below better summarises the functionality:
A PopOver with no content Of course, a PopOver with no content is a little sad, so here’s a screenshot of one with content inside it. Note that this is using a custom TitledPane style that presently doesn&amp;rsquo;t ship with ControlsFX (but that you can create with a little CSS):</description></item><item><title>PropertySheet</title><link>/features/propertysheet/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/features/propertysheet/</guid><description>PropertySheet # PropertySheet is a vertical list of properties that can be edited with a number of pre-build editors. We support string, number, boolean, enumeration, color, and font editors. As well as supporting the built-in editors, you can provide custom editors for your specific use cases.
A PropertySheet Control</description></item><item><title>RangeSlider</title><link>/features/rangeslider/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/features/rangeslider/</guid><description>RangeSlider # When you want a user to specify a range, right now you need to give them two text fields to type into (or two sliders). Yuck!
The RangeSlider control is essentially the standard JavaFX slider but with two draggable thumbs on it – one representing the low value and the other the high value. Much better!
A RangeSlider Control</description></item><item><title>Rating</title><link>/features/rating/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/features/rating/</guid><description>Rating # Rating is a simple control that allows users to specify a rating between zero, and a maximum value. This control supports partial ratings and updating on a hover or on a click.
A Rating Control</description></item><item><title>SearchableComboBox</title><link>/features/searchablecombobox/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/features/searchablecombobox/</guid><description>SearchableComboBox # SearchableComboBox is a simple extension of a ComboBox which shows a search field while the popup is showing. The user can type any text into this search field to filter the popup list.
A SearchableComboBox Control</description></item><item><title>SegmentedBar</title><link>/features/segmentedbar/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/features/segmentedbar/</guid><description>SegmentedBar # A control that makes it easy to create a horizontal or vertical bar that visualizes the segmentation of a total value. It consists of several segments, each segment representing a value. The sum of all values is the total value of the bar.
Segmented Bar Variations</description></item><item><title>SegmentedButton</title><link>/features/segmentedbutton/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/features/segmentedbutton/</guid><description>SegmentedButton # When you have a ToggleGroup with buttons in it, it looks nicer when the buttons are grouped together (rather than individual buttons).
This is exactly what the SegmentedButton control does - it ‘merges’ together all of your buttons in a ToggleGroup so that it is clear to users that the buttons are related.
A SegmentedButton Control</description></item><item><title>SnapshotView</title><link>/features/snapshotview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/features/snapshotview/</guid><description>SnapshotView # The SnapshotView control allows users to draw a bounding box inside a scenegraph (or typically in an ImageView).
This bounding box represents the dimensions of their selection, and from which an image can be created of the selected area. This is another of those controls that is easier to describe with an image, so, see below! 🙂
SnapshotView - the &amp;#39;Controls&amp;#39; section of the image has been selected</description></item><item><title>SpreadsheetView</title><link>/features/spreadsheetview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/features/spreadsheetview/</guid><description>SpreadsheetView # The SpreadsheetView control is exactly what you expect – a TableView-like control that supports cell spanning, fixed rows and columns, and cell editing.
Here’s a screenshot of the control:
SpreadsheetView</description></item><item><title>TaskProgressView</title><link>/features/taskprogressview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/features/taskprogressview/</guid><description>TaskProgressView # The task progress view is used to visualize the progress of long-running tasks. These tasks are created via the Task class. This view manages a list of such tasks and displays each one of them with their name, progress, and update messages.
An optional graphic factory can be set to place a graphic in each row. This allows the user to more easily distinguish between different types of tasks.</description></item><item><title>TextFields</title><link>/features/textfields/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/features/textfields/</guid><description>TextFields # ControlsFX ships with a few useful TextField-related controls.
AutoComplete TextField # It can provide suggestions to users as they type into it. The popup will only show options based on the currently typed input.
AutoComplete TextField TextFields # In addition, there is API to make it really easy for you to customise a TextField (or PasswordField) by placing nodes within the text area. There are also pre-built features such as clearable fields that show a little cross that clears the text when deleted.</description></item><item><title>ToggleSwitch</title><link>/features/toggleswitch/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/features/toggleswitch/</guid><description>ToggleSwitch # Much like a Toggle Button this control allows the user to toggle between one of two states. It has been popularized in touch based devices where its usage is particularly useful because unlike a checkbox the finger touch of a user doesn&amp;rsquo;t obscure the control.
Toggle Switch</description></item><item><title>World Map View</title><link>/features/worldmapview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/features/worldmapview/</guid><description>World Map View # A simple map view showing either the entire world or a list of countries. The view is not capable of displaying detailed map information. The view is based on simple SVG data found in a properties file of the ControlsFX distribution.
A big advantage of this approach is the fact that the view can be run without a network connection. In addition to showing countries or the world the view can also show locations.</description></item></channel></rss>